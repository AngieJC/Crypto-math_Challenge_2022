from BasicTools import *
from ConstraintGenerator import *
from gurobipy import *
import pickle


XOR_3bitCode_Delta=set([(0,0,0,0),(0,0,1,0),(0,1,0,0),(1,0,0,0),(1,0,1,1),(1,0,1,0)])
ThreeBitCode_Delta_pattern=[(1, 0, 0, -1, 0),\
(-1, -1, 0, 0, 1),\
(0, 0, 1, -1, 0),\
(0, -1, -1, 0, 1)]

XOR_3bitCode_Delta_Ad=set([(0,0,0,0,0),(0,0,1,0,0),(0,1,0,0,0),(1,0,0,0,0),(1,0,1,1,0),(1,0,1,0,1)])
ThreeBitCode_Delta_Ad_pattern=[(0, 0, 1, -1, -1, 0),\
(-1, -1, -1, 1, 1, 1),\
(1, 0, 0, -1, -1, 0)]

l_r_o_fAH_fAL_points=set([(0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0), (0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1), (0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0), (1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1), (0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0), (0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1), (1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0), (1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0), (1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0), (1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0), (0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0), (0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0), (0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0), (0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0), (0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1), (1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0), (1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0), (1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1), (1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0), (1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0), (0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0), (1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0), (0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1), (0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0), (0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0), (1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0), (0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0), (1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0), (1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0), (1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1), (0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0), (1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0), (0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0), (1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0), (0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1), (0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0), (1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0), (1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0), (1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0), (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0), (1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0), (0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0), (1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0), (1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0), (1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0), (0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0), (0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0), (0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1), (1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1)])
l_r_o_fAH_fAL_patterns=[(-1, -3, -1, -1, -3, -1, -2, -3, -2, -2, -3, 9),\
(3, 3, 2, 3, 3, 2, -1, -1, -2, -6, -4, 0),\
(0, 0, 0, -1, -2, -1, 1, 2, 1, 1, 2, 0),\
(-3, -4, -3, 0, 1, 0, 1, 0, 1, 3, -1, 4),\
(0, -1, -1, -2, 0, -3, 0, -1, 4, 5, 2, 2),\
(-1, 0, 0, -1, 0, 0, 2, -1, -1, 2, 1, 1),\
(-1, -2, -1, 0, 1, 0, 1, 2, 1, 1, 1, 0),\
(0, 1, 1, 0, 1, 1, -2, -1, -1, -2, -2, 2),\
(0, 0, -1, 0, 0, -1, -1, -1, 2, 2, 1, 1),\
(0, 1, -2, -3, -4, -1, 3, 2, 1, 3, 1, 2),\
(2, 1, 2, 2, 0, 1, -1, 0, -1, -3, -1, 0),\
(-2, -1, 1, 1, 0, 0, 2, 1, 1, 0, 1, 0),\
(1, 1, 0, 1, 1, 0, -1, -1, -2, -2, -2, 2)]

XOR_Delta_lro_points=set([(0,0,0,0),(0,1,1,0),(1,0,1,0),(1,1,0,1),(1,1,1,0)])
XOR_Delta_lro_patterns=[(-1,-1,2,2,0),\
(2,1,-1,-3,0)]

XOR_3bitXCode_Delta=set([(0,0,0,0),(0,1,0,0),(1,0,0,0),(1,0,1,1),(1,0,1,0)])
XOR_3bitXCode_Delta_patterns=[(1, 0, -1, 0, 0),\
(-1, -1, 0, 0, 1),\
(0, 0, 1, -1, 0)]

XOR_2bitCode_Delta= set([(0,0,0),(0,1,0),(1,0,0),(1,1,1)])
XOR_2bitCode_Delta_patterns=[(1,1,-2,0),\
(-1,-1,1,1)]

XOR_2bitCode_Delta_Ad= set([(0,0,0,0),(0,1,0,0),(1,0,0,0),(1,1,1,0),(1,1,0,1)])
XOR_2bitCode_Delta_Ad_patterns=[(-1,-1,1,2,1),\
(1,1,-2,-2,0)]

l_r_o_fAH_fAL_points_2bitCodes=set([(1, 1, 1, 1, 0, 1, 1, 0), (0, 0, 0, 1, 0, 1, 0, 0), (1, 1, 1, 1, 1, 1, 0, 0), (0, 0, 0, 0, 0, 0, 0, 0), (0, 1, 0, 0, 0, 1, 0, 0), (1, 1, 1, 0, 0, 1, 1, 0), (0, 0, 1, 1, 1, 1, 0, 0), (0, 1, 1, 1, 1, 1, 0, 0), (0, 0, 1, 0, 1, 0, 0, 0), (1, 1, 1, 0, 1, 1, 0, 0), (0, 1, 1, 0, 1, 1, 0, 0), (1, 0, 0, 1, 1, 1, 0, 0), (1, 1, 1, 1, 1, 0, 1, 0), (0, 1, 0, 1, 0, 0, 0, 1), (1, 1, 0, 1, 1, 1, 0, 0), (1, 1, 1, 1, 0, 0, 1, 1), (1, 0, 1, 0, 1, 0, 0, 0), (1, 0, 0, 0, 1, 0, 0, 0), (0, 1, 0, 1, 0, 1, 0, 0), (1, 1, 0, 1, 1, 0, 1, 0), (1, 0, 1, 1, 1, 1, 0, 0), (1, 1, 0, 0, 1, 1, 0, 0), (0, 1, 1, 1, 1, 0, 1, 0), (1, 0, 1, 1, 0, 1, 1, 0), (1, 0, 1, 0, 0, 0, 0, 1)])
l_r_o_fAH_fAL_patterns_2bitCodes=[(0,1,0,-2,-1,2,1,0,1),\
(1,2,1,2,-3,-2,-4,-4,2),\
(1,0,1,0,2,1,-3,1,0),\
(2,1,2,1,-2,-1,-2,-2,0),\
(-1,-2,-1,0,2,2,2,2,0),\
(-1,0,-1,0,2,-2,2,0,2)]

exchanging_l_r_o_fAH_fAL_points_6bitCodes=set([(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0), (0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0), (0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0), (1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0), (1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1), (1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0), (1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0), (1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0), (1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0), (1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0), (1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0), (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1), (1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0), (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0), (1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0), (1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0), (1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0), (1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0), (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0), (1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0), (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0)])
exchanging_l_r_o_fAH_fAL_patterns_6bitCodes=[(0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, -1, 0, 0, 0, -2, -2, 0),\
(3, -1, -2, 0, 0, 0, 3, -1, -2, 0, 0, 0, 0, 1, 2, 0, 0, -3, 2, -2, 0),\
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 2, -1, 1, 0),\
(-1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0),\
(0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, -2, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 2, 0),\
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 0, 0, 0, 0, 0),\
(-1, 1, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 2, 0),\
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0),\
(0, 0, 0, 0, 0, 0, 2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 0),\
(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(-1, 0, 1, 0, 0, 0, 0, 0, -2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 2, 0),\
(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0),\
(0, 0, -2, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 1, 2, 0),\
(2, -1, -1, 0, 0, 0, 1, -1, 0, 0, 0, 0, 0, 1, 0, 0, 0, -1, 1, -1, 0),\
(0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -2, -1, 0, 0, 2, -2, 0, 0),\
(0, 0, 0, 0, 0, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(-1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\
(0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, -2, 0, 0, 2, -2, 0, 0)]

Code3bit_Delta=set([(0,0,0,0),(0,0,1,0),(0,1,0,0),(1,0,0,0),(1,0,1,1)])
Code3bit_DeltaPattern=[(-1, -1, -1, 1, 1),\
(1, 0, 0, -1, 0),\
(0, 0, 1, -1, 0)]

e_ij_Delta=set([(1, 1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0, 0), (1, 0, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 0, 1), (1, 1, 0, 1, 1, 1, 1), (1, 0, 0, 1, 1, 0, 1), (0, 1, 0, 1, 0, 1, 1), (0, 1, 1, 1, 1, 0, 0), (1, 1, 1, 1, 0, 1, 1), (0, 1, 1, 1, 1, 1, 1), (1, 1, 1, 0, 1, 1, 1), (1, 1, 1, 0, 0, 0, 1), (0, 0, 1, 0, 1, 1, 1), (1, 1, 0, 0, 1, 1, 0), (1, 0, 1, 1, 0, 1, 0)])
e_ij_Delta_tmplt=[(1, -1, 1, 1, -1, 1, -1, 0),\
(-1, 1, 1, 1, 1, -1, -1, 0),\
(-1, -1, 1, -1, 1, 1, 1, 0),\
(1, 1, -1, -1, 1, 1, -1, 0),\
(1, 1, 1, -1, -1, -1, 1, 0),\
(-1, 1, -1, 1, -1, 1, 1, 0),\
(1, -1, -1, 1, 1, -1, 1, 0),\
(0, -1, -1, 0, 0, -1, 1, 2)]

codes_flag01=set([(0,0,0,0,0),(0,0,0,1,1),(0,0,1,0,1),(0,0,1,1,1),(0,1,0,0,0),(0,1,0,1,1),(0,1,1,0,1),\
                  (0,1,1,1,1),(1,0,0,0,1),(1,0,0,1,1),(1,0,1,0,0),(1,0,1,1,1),(1,1,0,0,1),(1,1,0,1,0),(1,1,1,0,0)])
codes_flag01_pattern=[(1, 0, -1, -1, 2, 0),\
(-2, -2, -1, -1, -1, 5),\
(1, 0, 1, 1, -1, 0),\
(-1, 1, 1, 0, 1, 0),\
(-1, 0, 1, 1, 1, 0),\
(-1, 0, -1, 1, -1, 2)]

codes_flag02=set([(0,0,0,0,0),(0,0,0,1,0),(0,0,1,0,1),(0,0,1,1,1),(0,1,0,0,1),(0,1,0,1,1),(0,1,1,0,0),\
                  (0,1,1,1,1),(1,0,0,0,1),(1,0,0,1,1),(1,0,1,0,1),(1,0,1,1,1),(1,1,0,0,0),(1,1,0,1,1),(1,1,1,0,0)])
codes_flag02_pattern=[(-1, -1, -1, -3, 2, 3),\
(-1, -2, -1, 1, -2, 4),\
(0, 1, -1, 0, 1, 0),\
(1, 1, 1, 0, -1, 0),\
(1, -1, 1, 0, 1, 0),\
(-1, 1, 0, 0, 1, 0)]

codes_flag03=set([(0,0,0,0,0),(0,0,0,1,1),(0,0,1,0,0),(0,0,1,1,1),(0,1,0,0,1),(0,1,0,1,1),(0,1,1,0,0),\
                  (0,1,1,1,1),(1,0,0,0,1),(1,0,0,1,1),(1,0,1,0,0),(1,0,1,1,0),(1,1,0,0,1),(1,1,0,1,1),(1,1,1,0,1)])
codes_flag03_pattern=[(-1, -1, 1, 0, 2, 0),\
(1, 1, -1, 2, -2, 1),\
(1, 0, 0, -1, 1, 0),\
(-1, 0, -1, -1, -1, 3)]

codes_flag12=set([(0,0,0,0,0),(0,0,0,1,1),(0,0,1,0,0),(0,0,1,1,1),(0,1,0,0,1),(0,1,0,1,0),(0,1,1,0,1),\
                 (0,1,1,1,1),(1,0,0,0,1),(1,0,0,1,0),(1,0,1,0,1),(1,0,1,1,1),(1,1,0,0,1),(1,1,0,1,1),(1,1,1,0,0)])
codes_flag12_pattern=[(-1, -1, -1, -2, 1, 3),\
(-1, -1, 2, 1, 2, 0),\
(1, 1, 0, 1, -1, 0),\
(1, 1, 0, -1, 1, 0),\
(-1, -1, -1, 0, -1, 3),\
(1, -1, 1, -1, -1, 2),\
(-1, 1, 1, -1, -1, 2),\
(-1, 1, -1, 0, 1, 1),\
(1, -1, 0, 1, 1, 0)]

codes_flag13=set([(0,0,0,0,0),(0,0,0,1,0),(0,0,1,0,1),(0,0,1,1,1),(0,1,0,0,1),(0,1,0,1,0),(0,1,1,0,1),\
                 (0,1,1,1,1),(1,0,0,0,0),(1,0,0,1,1),(1,0,1,0,0),(1,0,1,1,1),(1,1,0,0,1),(1,1,0,1,1),(1,1,1,0,1)])
codes_flag13_pattern=[(-1, -1, -1, -1, 1, 2),\
(1, 0, -1, 0, 1, 0),\
(-1, 1, 0, 1, -1, 1),\
(0, -1, 0, 1, 1, 0),\
(1, 0, 1, -1, -1, 1),\
(0, 1, 1, 1, -1, 0),\
(-1, 0, 0, -1, 1, 1)]

codes_flag23=set([(0,0,0,0,0),(0,0,0,1,1),(0,0,1,0,1),(0,0,1,1,1),(0,1,0,0,0),(0,1,0,1,0),(0,1,1,0,0),\
                  (0,1,1,1,0),(1,0,0,0,1),(1,0,0,1,1),(1,0,1,0,1),(1,0,1,1,1),(1,1,0,0,1),(1,1,0,1,1),(1,1,1,0,1)])
codes_flag23_pattern=[(-1, 0, 0, 0, 1, 0),\
(1, -1, 0, 0, -1, 1),\
(0, 1, 0, -1, 1, 0),\
(1, 0, 1, 1, -1, 0),\
(0, -1, -1, -1, -1, 3),\
(0, 1, -1, 0, 1, 0)]
codes_A=set([(0,0,0,0,1,1),(0,0,0,1,1,0),(0,0,1,0,1,0),(0,0,1,1,0,0),(0,1,0,0,1,0),(0,1,0,1,1,0),\
            (0,1,1,0,1,0),(0,1,1,1,0,1),(1,0,0,0,0,1),(1,0,0,1,0,1),(1,0,1,0,1,0),(1,0,1,1,0,1),(1,1,0,0,0,1),(1,1,0,1,0,1),(1,1,1,0,1,0)])
codes_A_pattern=[(-1, -1, -1, -2, -4, -3, 7),\
(-1, 0, 1, 0, 1, 2, -1),\
(1, 0, 0, 1, 1, 0, -1),\
(1, 1, 0, -1, 0, -1, 1),\
(0, 0, -1, 1, 0, -1, 1),\
(1, 0, 1, 0, 1, 0, -1),\
(0, 0, -1, -1, -1, 0, 2),\
(-1, -1, -1, -2, 0, 1, 3),\
(1, 1, 1, 1, 1, 1, -2)]

pairwise_orth=set([(0,0,1,0),(0,0,0,1),(0,0,1,1),(1,0,0,0),(1,0,0,1),(1,0,1,1),(1,1,0,0),(0,0,0,0),(0,1,0,0)])
pairwise_orth_pattern=[(0, -1, -1, 0, 1),\
(0, -1, 0, -1, 1),\
(-1, 0, -1, 1, 1)]

pairwise_cross= set([(0,0,0,0),(0,0,0,1),(0,0,1,0),(0,0,1,1),(0,1,0,0),(0,1,1,1),(1,0,0,1),(1,0,1,1),(1,1,0,1)])
pairwise_cross_pattern=[(-1, -1, -1, 1, 1),\
(-1, 0, 0, 1, 0),\
(1, -1, 1, -1, 1)]


A_fAHAL_Delta_HL_pattern=[(0, 0, 0, 0, 0, 0, 1, 1, 0, -1, -1, 0),\
(1, 0, 0, 0, 0, 0, -2, -1, 0, 2, 1, 0),\
(-1, -1, -1, -1, -1, -1, 2, 1, 0, 3, 3, 0),\
(0, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0),\
(1, 1, 1, 1, 1, 1, -2, -1, 0, 0, 0, 0),\
(0, 0, 0, 0, 0, 0, -2, -1, -1, 2, 1, 1),\
(-1, 0, 0, 0, 0, -1, 1, 1, 1, -2, -1, 2),\
(0, 0, 0, 0, 0, 1, -2, -1, 0, 2, 1, 0),\
(1, 1, 1, 0, 0, 0, -2, -1, 0, 1, 0, 1),\
(1, 0, 0, 1, 1, 0, -2, -1, 0, 1, 0, 1),\
(0, 0, 1, 0, 1, 1, -2, -1, 0, 1, 0, 1),\
(0, 1, 0, 1, 0, 1, -2, -1, 0, 1, 0, 1)]

A_fAHAL_Delta_HL_pattern_Christina=[(1,0,0,0,0,1,-4,-2,0,4,2,0),\
(0,0,0,0,0,1,-4,-2,-1,4,2,1),\
(2,2,2,1,0,1,-4,-1,0,1,-1,2),\
(2,1,1,2,2,1,-3,-2,0,0,0,1),\
(1,1,2,1,2,2,-2,-2,0,-1,0,1),\
(0,0,0,0,0,0,2,1,0,-2,-1,0),\
(-1,0,0,0,0,-1,2,1,1,-3,-1,2),\
(0,1,0,1,0,2,-1,1,0,0,-2,1),\
(-1,-1,-1,-1,-1,-1,2,1,0,3,3,0)]

xor_3division= set([(1,0,0,0,1),(0,1,0,0,1),(0,0,1,0,1),(0,0,0,1,1),(0,0,0,0,0)])
xor_3dividion_pattern=[(-1, -1, -1, -1, 1, 0),\
(1, 1, 1, 1, -1, 0)]

lab_deA_dop_minus = set([(0,0,1),(0,1,0),(1,0,0),(1,1,0)])
lab_deA_dop_minus_pattern = [(0, -1, -1, 1),\
(1, 1, 1, -1),\
(-1, 0, -1, 1)]

lab_deA_dop_fAHAL_minus = set([\
                               (0,0,1,1,1),(0,0,1,0,1),(0,0,0,1,0),(0,0,0,0,0),\
                               (0,1,0,0,0),(0,1,0,1,0),(0,1,1,0,0),(0,1,1,1,0),\
                               (1,0,0,0,0),(1,0,0,1,0),(1,0,1,0,0),(1,0,1,1,0),\
                               (1,1,0,0,0),(1,1,0,1,0),(1,1,1,0,0),(1,1,1,1,0)\
                              ])
lab_deA_dop_fAHAL_minus_pattern=[(0, -1, 0, 0, -1, 1),\
(0, 0, 1, 0, -1, 0),\
(1, 1, -1, 0, 1, 0),\
(-1, 0, 0, 0, -1, 1)]

e_ij_Delta2=set([(1, 1, 1, 1, 1, 1, 0),(1, 1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0, 0), (1, 0, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 0, 1), (1, 1, 0, 1, 1, 1, 1), (1, 0, 0, 1, 1, 0, 1), (0, 1, 0, 1, 0, 1, 1), (0, 1, 1, 1, 1, 0, 0), (1, 1, 1, 1, 0, 1, 1), (0, 1, 1, 1, 1, 1, 1), (1, 1, 1, 0, 1, 1, 1), (1, 1, 1, 0, 0, 0, 1), (0, 0, 1, 0, 1, 1, 1), (1, 1, 0, 0, 1, 1, 0), (1, 0, 1, 1, 0, 1, 0)])
e_ij_Delta2_pattern=[(1, -1, 1, 1, -1, 1, -1, 0),\
(-1, 1, -1, 1, -1, 1, 1, 0),\
(-1, 1, 1, 1, 1, -1, -1, 0),\
(1, -1, -1, 1, 1, -1, 1, 0),\
(-1, -1, 1, -1, 1, 1, 1, 0),\
(1, 1, -1, -1, 1, 1, -1, 0),\
(1, 1, 1, -1, -1, -1, 1, 0)]
    
deA_e_AHAL_pattern = [(1, 2, 3, 3, 1, 2, -2, -1, -3, -1, -2, -1, -5, -3, 0), \
                      (8, -14, -14, 4, 4, -10, -6, 6, 6, -1, -1, 7, 16, 6, 14), \
                      (-4, 0, 4, -2, 2, -2, 4, -1, -3, 2, -2, 3, 6, 4, 0), \
                      (-10, -14, 4, -14, 4, 8, 7, 6, -1, 6, -1, -6, 16, 6, 14), \
                      (-14, 8, -14, 4, -10, 4, 6, -6, 6, -1, 7, -1, 16, 6, 14), \
                      (4, -6, 4, 8, 4, -8, -2, 4, -6, -5, -1, 5, 0, 4, 2), \
                      (-2, -4, 2, 0, -2, 4, 2, 4, -2, -1, 3, -3, 6, 4, 0), \
                      (2, 4, -2, -2, 4, 6, -1, -1, 0, 0, -1, -3, -6, -4, 0), \
                      (4, 2, -2, -4, 0, -2, -3, -2, 3, 4, -1, 2, 6, 4, 0), \
                      (4, 4, 4, 4, 4, 4, -1, -1, -2, -3, -4, -4, -14, -10, 0), \
                      (-2, 4, 4, 2, 4, -2, -2, -3, 1, -2, 0, 1, -6, -2, 0), \
                      (4, -2, 4, 4, -2, 2, 1, -2, -3, 0, 1, -2, -6, -2, 0), \
                      (0, 0, 0, -2, -2, -2, 1, 1, -2, 1, 2, 2, 4, 2, 2), \
                      (-4, -3, -2, -4, -3, -2, -1, 3, 3, 2, 3, -1, 6, 2, 10), \
                      (-2, -2, -2, -2, -2, -2, 2, 0, 2, 1, -1, 1, 3, 2, 7)]
e_ij_RandAct = set([(1,1,1,1,1,1,0,0),(0,0,0,0,0,0,1,1),(1,0,1,1,0,1,1,0),(1,1,0,0,1,1,1,0),(0,1,1,1,1,0,1,0),\
                (1,1,1,0,0,0,1,0),(1,0,0,1,1,0,1,0),(1,1,1,1,1,0,0,1),(1,1,1,1,0,1,0,1),(1,1,1,0,1,1,0,1),(0,1,0,1,0,1,1,0),\
                (1,1,0,1,1,1,0,1),(1,0,1,1,1,1,0,1),(0,1,1,1,1,1,0,1),(0,0,1,0,1,1,1,0)])
e_ij_RandAct_pattern = [(1, 1, 1, 1, 1, 1, 5, 1, -6),\
(-2, -1, -1, -2, -2, -1, -8, -6, 14),\
(1, 0, 1, 1, 0, 1, 2, 2, -4),\
(2, 2, 0, -1, 1, 1, 3, 2, -5),\
(-1, 1, 2, 1, 2, 0, 3, 2, -5),\
(0, -1, -1, 0, 0, -1, -3, -2, 5),\
(-1, 0, -1, 0, -1, 0, -1, 0, 3),\
(-1, -1, 0, -1, 0, 0, -1, 0, 3),\
(2, 0, 2, 1, -1, 1, 3, 2, -5)]
e_SB_ij_Delta_A_pattern=set([(0, 0, 1, 0, 1, 1, 1, 0), (1, 1, 1, 0, 1, 1, 1, 0), (1, 1, 0, 1, 1, 1, 1, 0), (1, 1, 1, 1, 0, 1, 1, 0), \
      (1, 1, 1, 1, 1, 1, 0, 1), (1, 1, 1, 1, 1, 0, 1, 0), (1, 1, 0, 0, 1, 1, 0, 0), (0, 1, 1, 1, 1, 0, 0, 0), \
      (1, 0, 1, 1, 1, 1, 1, 0), (1, 1, 1, 1, 1, 1, 1, 0), (1, 0, 1, 1, 0, 1, 0, 0), (0, 1, 1, 1, 1, 1, 1, 0), \
      (1, 1, 1, 0, 0, 0, 1, 0), (0, 0, 0, 0, 0, 0, 0, 0), (1, 0, 0, 1, 1, 0, 1, 0), (0, 1, 0, 1, 0, 1, 1, 0)])
e_SB_ij_Delta_A_pattern_tmplt=[(1, -1, 1, 1, -1, 1, -1, -2, 0),\
(-1, 1, 1, 1, 1, -1, -1, -2, 0),\
(1, 1, -1, -1, 1, 1, -1, -2, 0),\
(1, 1, 1, -1, -1, -1, 1, 0, 0),\
(1, -1, -1, 1, 1, -1, 1, 0, 0),\
(-1, 1, -1, 1, -1, 1, 1, 0, 0),\
(-1, -1, 1, -1, 1, 1, 1, 0, 0),\
(0, 0, -1, 0, -1, -1, 1, 1, 2)]

lab_dop_eij=set([(0, 0, 1, 1, 1, 1, 1, 1), (0, 0, 0, 0, 0, 0, 0, 0), (0, 0, 1, 0, 1, 1, 0, 1), (0, 0, 1, 1, 0, 0, 1, 1), (0, 0, 0, 1, 1, 1, 1, 0), (0, 1, 1, 1, 1, 0, 0, 0), (1, 0, 1, 1, 1, 0, 0, 0), (1, 1, 1, 1, 1, 0, 0, 0), (0, 1, 0, 1, 1, 1, 1, 0), (1, 0, 0, 1, 1, 1, 1, 0), (1, 1, 0, 1, 1, 1, 1, 0), (0, 1, 1, 0, 0, 1, 1, 0), (1, 0, 1, 0, 0, 1, 1, 0), (1, 1, 1, 0, 0, 1, 1, 0), (0, 1, 1, 1, 1, 1, 0, 1), (1, 0, 1, 1, 1, 1, 0, 1), (1, 1, 1, 1, 1, 1, 0, 1), (0, 1, 1, 1, 0, 0, 1, 1), (1, 0, 1, 1, 0, 0, 1, 1), (1, 1, 1, 1, 0, 0, 1, 1), (0, 1, 1, 1, 1, 1, 1, 0), (1, 0, 1, 1, 1, 1, 1, 0), (1, 1, 1, 1, 1, 1, 1, 0), (0, 1, 1, 1, 1, 0, 1, 1), (1, 0, 1, 1, 1, 0, 1, 1), (1, 1, 1, 1, 1, 0, 1, 1), (0, 1, 0, 1, 0, 1, 0, 1), (1, 0, 0, 1, 0, 1, 0, 1), (1, 1, 0, 1, 0, 1, 0, 1), (0, 1, 1, 1, 0, 1, 1, 1), (1, 0, 1, 1, 0, 1, 1, 1), (1, 1, 1, 1, 0, 1, 1, 1), (0, 1, 0, 0, 0, 0, 0, 0), (1, 0, 0, 0, 0, 0, 0, 0), (1, 1, 0, 0, 0, 0, 0, 0), (0, 1, 1, 0, 1, 1, 1, 1), (1, 0, 1, 0, 1, 1, 1, 1), (1, 1, 1, 0, 1, 1, 1, 1), (0, 1, 1, 0, 1, 1, 0, 1), (1, 0, 1, 0, 1, 1, 0, 1), (1, 1, 1, 0, 1, 1, 0, 1), (0, 1, 1, 1, 1, 1, 1, 1), (1, 0, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (0, 1, 0, 1, 1, 1, 1, 1), (1, 0, 0, 1, 1, 1, 1, 1), (1, 1, 0, 1, 1, 1, 1, 1), (0, 1, 0, 0, 1, 0, 1, 1), (1, 0, 0, 0, 1, 0, 1, 1), (1, 1, 0, 0, 1, 0, 1, 1)])

lab_dop_eij_tmp=[(1, 1, -1, -1, 1, -1, 1, 1, 0),\
(0, 0, 1, 1, 0, -1, 0, 0, 0),\
(0, 0, 0, 0, 0, 1, 1, -1, 0),\
(0, 0, 0, 0, 0, 1, -1, 1, 0),\
(0, 0, 0, 1, -1, 0, 0, 1, 0),\
(0, 0, 1, 0, 1, 0, -1, 0, 0),\
(1, 1, 1, -1, -1, 1, 1, -1, 0),\
(0, 0, -1, 1, 0, 1, 0, 0, 0),\
(0, 0, 0, 1, 1, 0, 0, -1, 0),\
(0, 0, -1, -1, 1, -1, 1, 1, 1),\
(0, 0, 1, -1, 0, 1, 0, 0, 0),\
(0, 0, 1, 0, -1, 0, 1, 0, 0),\
(1, 1, 1, 1, 1, -1, -1, -1, 0)]

andbox_diff=set([(0,0,0,0),(0,1,0,1),(0,1,1,1),(1,0,1,1),(1,0,0,1),(1,1,0,1),(1,1,1,1)])
andbox_diff_pattern=[(-1, 0, 0, 1, 0),\
(0, -1, 0, 1, 0),\
(1, 1, 0, -1, 0),\
(0, 0, -1, 1, 0)]

andbox_diff0=set([(0,0,0),(1,0,1),(1,1,1)])
andbox_diff0_pattern=[(0, -1, 1, 0),\
(1, 0, -1, 0),\
(-1, 0, 1, 0)]

xor_diff=set([(0,0,0),(0,1,1),(1,0,1),(1,1,0)])
xor_diff_pattern=[(-1, 1, 1, 0),\
(1, 1, -1, 0),\
(-1, -1, -1, 2),\
(1, -1, 1, 0)]

xor3_diff=set([(0, 0, 0, 0), (1, 0, 0, 1), (0, 1, 0, 1), (1, 1, 0, 0), (0, 0, 1, 1), (1, 0, 1, 0), (0, 1, 1, 0), (1, 1, 1, 1)])
xor3_diff_pattern=[(1, -1, 1, 1, 0),\
(-1, -1, 1, -1, 2),\
(-1, -1, -1, 1, 2),\
(-1, 1, -1, -1, 2),\
(-1, 1, 1, 1, 0),\
(1, -1, -1, -1, 2),\
(1, 1, 1, -1, 0),\
(1, 1, -1, 1, 0)]
class test_pattern:
    def varSum(var_list):
        res=var_list[0]
        for i in range(1,len(var_list)):
            res = res + ' + ' + var_list[i]
        return res
    def genModel(pattern):
        
        var_list=['var'+str(i) for i in range(len(pattern[0])-1)]
        C=ConstraintGenerator.genFromConstraintTemplate(var_list,pattern)
        V=BasicTools.getVariables_From_Constraints(C)
        myfile=open('pattern_test.lp','w')
        print('Minimize '+test_pattern.varSum(var_list),file=myfile)
        print('\n',file=myfile)
        print('Subject To',file=myfile)
        
        for c in C:
            print(c,file=myfile)

        print('\n',file=myfile)
        print('Binary',file=myfile)
        for v in V:
            print(v,file=myfile)

def main():
    '''
    f=open('constraints','rb')
    all_FourbitCodes_l_r_o_fAH_fAL_constraints=pickle.load(f)
    f.close()

    f=open('all_FourbitCodes_l_r_o_fAH_fAL','rb')
    all_FourbitCodes_l_r_o_fAH_fAL=pickle.load(f)
    f.close()
    point_set=set()
    for p in all_FourbitCodes_l_r_o_fAH_fAL:
        point_set.add(tuple(p))
    '''
    test_pattern.genModel(xor3_diff_pattern) # change to current pattern
    m=read('pattern_test.lp')

    m.setParam( 'OutputFlag', 0 )
    m.setParam( 'PoolSearchMode',  2 )
    m.setParam( 'PoolSolutions', 50000)

    m.optimize()
    counter = m.getAttr( 'SolCount' ) 
    print( "{} solutions...".format( counter ) )

    solution_set=set()
    for i in range(counter):
        m.setParam('SolutionNumber',i)
        xn=m.getAttr('Xn',m.getVars())
        var_value=[round(v) for v in xn]
        #print(var_value)
        solution_set.add(tuple(var_value))
    
    print(solution_set == xor3_diff) # change to current point set
        

if __name__=='__main__':
    main()
